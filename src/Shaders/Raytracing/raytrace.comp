#version 460
#extension GL_ARB_shading_language_include : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D OutTexture;
uniform uint ScreenWidth;
uniform uint ScreenHeight;

uniform mat4 CamToWorld;
uniform vec3 ViewParams;

uniform uint Frame = 0;

uniform bool ClearAccumulator = false;

#include "/Engine/Core/common.glsl"
#include "/Engine/Core/random.glsl"
#include "/Engine/Raytracing/ray.glsl"
#include "/Engine/Raytracing/materials.glsl"
#include "/Engine/Raytracing/intersections.glsl"
#include "/Engine/Raytracing/lighting.glsl"


vec3 Trace(Ray ray, uint seed)
{
	vec3 incommingLight = vec3(0);
	vec3 rayColor = vec3(1);

	for (int i = 0; i <= 3; ++i)
	{
		RayHitInfo info = RayCollision(ray);

		if (info.didHit)
		{
			vec3 BRDF = GetBRDF(info.material);
			float PDF = GetPDF(info.material);

			vec3 emittance = info.material.emissionColor * info.material.emissionStrength;

			vec3 light = SampleDirectionalLight(sun, info.hitPoint, info.normal);

			incommingLight += emittance + (BRDF * light) / PDF * rayColor;

			rayColor *= info.material.diffuseColor * light;

			ray.origin = info.hitPoint + 0.0001 * info.normal;
			LambertianBounce(ray, seed, info);
		}
		else
		{
			incommingLight += rayColor * vec3(0.2, 0.2, 0.4);
			break;
		}
	}

	return incommingLight;
}

void main()
{
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

	if (texelCoord.x >= ScreenWidth || texelCoord.y >= ScreenHeight)
	{
		return;
	}

	vec2 tc = vec2(float(texelCoord.x) / float(ScreenWidth), float(texelCoord.y) / float(ScreenHeight));

	vec3 focusDirLocal = vec3((tc - 0.5) * ViewParams.xy, ViewParams.z);
	vec3 focusDir = normalize((CamToWorld * vec4(focusDirLocal, 1.0)).xyz);
	Ray ray = Ray(
		vec3(CamToWorld[0].w, CamToWorld[1].w, CamToWorld[2].w),
		focusDir,
		1.0 / focusDir
	);

	uint seed = uint(floor(
		tc.y * ScreenHeight * ScreenWidth
		+ tc.x * ScreenWidth)
		* Frame
	);
	// Wang hash initialisation
	seed = (seed ^ 61u) ^ (seed >> 16u);
	seed *= 9u, seed = seed ^ (seed >> 4u);
	seed *= 0x27d4eb2du;
	seed = seed ^ (seed >> 15u);

	vec4 pixel = vec4(Trace(ray, seed), 1.0);
//	if (!ClearAccumulator)
//	{
//		vec4 accumulatorTexel = imageLoad(OutTexture, texelCoord);
//		if (accumulatorTexel.a > 0.0)
//		{
//			pixel = 0.5 * pixel + 0.5 * accumulatorTexel;
//		}
//	}

	imageStore(OutTexture, texelCoord, pixel);
}